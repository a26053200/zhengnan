---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2019/1/18 23:21
---

local LuaMonoBehaviour = require("Betel.LuaMonoBehaviour")
---@class Betel.UI.BaseList : Betel.LuaMonoBehaviour
---@field New fun(gameObject:UnityEngine.GameObject, itemRendererClass:table, noPassEvent:boolean)
---@field listView EasyList.ListViewBase
---@field scroll UnityEngine.UI.ScrollRect
---@field noPassEvent boolean 是否禁止项目事件穿透
---@field adapter EasyList.LuaListViewAdapter
---@field cell EasyList.LuaListViewCell
---@field dataList List
---@field itemList table<any, Betel.UI.ListItemRenderer>
---@field listExtend Game.Modules.Common.View.ListExtend
local BaseList = class("Betel.UI.BaseList",LuaMonoBehaviour)

---@param gameObject UnityEngine.GameObject
---@param itemRendererClass table
function BaseList:Ctor(gameObject, itemRendererClass, noPassEvent)
    BaseList.super.Ctor(self,gameObject)
    self.noPassEvent = noPassEvent
    self.itemRendererClass = itemRendererClass
    self.scroll = gameObject:GetComponent(typeof(UnityEngine.UI.ScrollRect))
    self.eventDispatcher = EventDispatcher.New()
    self.itemList = {}
    self.clickEventMap = {} --主动注册的点击事件
    --self.cell = self.adapter.gameObject:GetCom("LuaListViewCell")
    self:AddLuaMonoBehaviour(gameObject,"BaseList")
end

---@param dataList List
function BaseList:SetData(dataList)
    self.dataList = dataList
    self.adapter:Init(self.dataList:Size(),handler(self,self.OnItemCreate))
    self.listView:RefreshData()
end

function BaseList:Refresh()
    self.adapter:Init(self.dataList:Size(),handler(self,self.OnItemCreate))
    self.listView:RefreshData()
end

function BaseList:Clear()
    self.listView:ClearAllCell()
end

---@param cell EasyList.LuaListViewCell
---@param index number
---@return Betel.UI.ListItemRenderer
function BaseList:OnItemCreate(cell, index)
    if index + 1 > self.dataList:Size() then
        logError(string.format("index %s, size %s",index + 1, self.dataList:Size()))
        return
    end
    local data = self.dataList[index + 1]
    local item = self.itemRendererClass.New(cell.gameObject) ---@type Betel.UI.ListItemRenderer
    if not self.noPassEvent then --项目事件是否穿透
        local listener = cell.gameObject:GetOrAddComponent(typeof(EasyList.ListItemEventListener))
        listener.scroll = self.scroll
    end
    item.data = data
    self.itemList[index + 1] = item
    item:UpdateItem(data,index + 1)
    local handler = self.clickEventMap[cell.gameObject]
    if handler ~= nil then
        LuaHelper.RemoveObjectEvent(cell.gameObject, handler)
    end
    handler = function(event)
        self.eventDispatcher:DispatchEvent(ListViewEvent.New(ListViewEvent.ItemClick), data, index + 1)
    end
    self.clickEventMap[cell.gameObject] = handler
    LuaHelper.AddObjectClickEvent(cell.gameObject, handler)
    --cell.gameObject:GetOrAddComponent(typeof(Framework.ClickFeedback))
    --self:AddItemClick(cell.gameObject,data,index + 1)
    item.listView = self
    return item
end

--单独更新一个
---@param index number
function BaseList:UpdateItem(index)
    local item = self.itemList[index]
    item:UpdateItem(self.dataList[index],index)
end

--获取项目
---@param index number
---@return Betel.UI.ListItemRenderer
function BaseList:GetItemRenderByIndex(index)
    local item = self.itemList[index]
    return item
end

--获取项目
---@param data any
---@return Betel.UI.ListItemRenderer
function BaseList:GetItemRenderByData(data)
    for _, item in ipairs(self.itemList) do
        if item.data == data then
            return item
        end
    end
    return nil
end

--更新全部
function BaseList:UpdateAll()
    for index, item in ipairs(self.itemList) do
        item:UpdateItem(self.dataList[index], index)
    end
end

function BaseList:SetScrollEnable(enable)
    self.scroll.enabled = enable
end

function BaseList:OnDestroy()
    if self.listExtend then
        self.listExtend:Dispose()
        self.listExtend = nil
    end
    for go, handler in pairs(self.clickEventMap) do
        LuaHelper.RemoveObjectEvent(go, handler)
    end
    self.eventDispatcher:RemoveAllEventListeners(ListViewEvent.ItemClick)
end

return BaseList