---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2018/7/9 23:35
--- 网络通信
---

local json = require("cjson")
local NetworkListener = require("Betel.Net.NetworkListener")
local LuaMonoBehaviour = require('Betel.LuaMonoBehaviour')
---@class Betel.Net.NetworkManager : Betel.LuaMonoBehaviour
---@field New fun() : Betel.Net.NetworkManager
---@field httpUrl string
---@field listenerList table<number,Betel.Net.NetworkListener>
---@field listener Betel.Net.NetworkListener
---@field timeout number
---@field timeoutCo table
local NetworkManager = class("NetworkManager", LuaMonoBehaviour)

function NetworkManager:Ctor()
    self.listenerList = List.New() ---@type List
    self.listener = NetworkListener.New(true)
    self.listenerList:Add(self.listener)

    netMgr:SetLuaFun("OnReConnect", handler(self, self.OnReConnect))
    --netMgr:SetLuaFun("OnHttpRspd", handler(self, self.OnHttpRspd))
    netMgr:SetLuaFun("OnJsonRspd", handler(self, self.OnJsonRspd))
end

function NetworkManager:Connect(host, port, onConnectSuccess, onConnectFail)
    netMgr:SetLuaFun("OnConnect", onConnectSuccess)
    netMgr:SetLuaFun("OnConnectFail", onConnectFail)
    netMgr:Connect(host, port)
end

function NetworkManager:OnConnectFail()
    print("OnConnectFail ")
end

function NetworkManager:OnReConnect(data)
    print("OnReConnect " .. json)
end

--添加监听器
function NetworkManager:AddListener(listener)
    if not self.listenerList:Contain(listener) then
        self.listenerList:Add(listener)
    end
end

--移除监听器
function NetworkManager:RemoveListener(listener)
    if self.listenerList:Contain(listener) then
        self.listenerList:Remove(listener)
    end
end

--添加推送监听
function NetworkManager:AddPush(action, callback)
    if callback ~= nil then
        self.listener:addPushCallback(action, callback)
    end
end

--添加Http请求
function NetworkManager:HttpRqst(data, params, callback)
    local rqstStartTime = Time.realtimeSinceStartup
    data = self:parseParams(data,params)
    local jsonStr = json.encode(data)
    log("<color=#95FF00ff>[Http Rqst]</color><color=#ffffffff>{0}</color>", jsonStr)
    netMgr:HttpRequest(self.httpUrl, jsonStr, function(jsonStr)
        self.timeout = Time.realtimeSinceStartup - rqstStartTime
        local jsonData = json.decode(jsonStr)
        log("<color=#cc7832ff>[Http Rspd]</color><color=#ffffffff>{0}</color>", jsonStr)
        callback(jsonData)
    end)
end

--添加Http Post
function NetworkManager:HttpPost(data, params, callback)
    local rqstStartTime = Time.realtimeSinceStartup
    data = self:parseParams(data,params)
    local jsonStr = json.encode(data)
    log("<color=#95FF00ff>[Http Post]</color><color=#ffff00ff>{0}</color>", jsonStr)
    netMgr:HttpPost(self.httpUrl, jsonStr, function(jsonStr)
        self.timeout = Time.realtimeSinceStartup - rqstStartTime
        local jsonData = json.decode(jsonStr)
        log("<color=#cc7832ff>[Http Rspd]</color><color=#ffffffff>{0}</color>", jsonStr)
        callback(jsonData)
    end)
end

--异步发送
function NetworkManager:Send(json)
    netMgr:SendJson(json)
end

--同步请求
function NetworkManager:Request(data, params, callback)
    if callback ~= nil then
        self.listener:addCallback(data.action, callback)
    end
    data = self:parseParams(data,params)
    local jsonStr = json.encode(data)
    log("<color=#266484ff>[Send]</color><color=#ffffffff>{0}</color>", jsonStr)
    netMgr:SendJson(jsonStr)
end

function NetworkManager:OnHttpRspd(jsonStr)
    local jsonData = json.decode(jsonStr)
    log("<color=#cc7832ff>[Http Rspd]</color><color=#ffffffff>{0}</color>", jsonStr)
    for i = 1, self.listenerList:Size() do
        self.listenerList[i]:handlerRqstCallback(jsonData.action, jsonData)
    end
end

function NetworkManager:OnJsonRspd(jsonStr)
    local jsonData = json.decode(jsonStr)
    log("<color=#cc7832ff>[Rspd]</color><color=#ffffffff>{0}</color>", jsonStr)
    for i = 1, self.listenerList:Size() do
        if string.find(jsonData.action,"push@") ~= nil then
            self.listenerList[i]:handlerPushCallback(jsonData.action, jsonData)
        else
            self.listenerList[i]:handlerRqstCallback(jsonData.action, jsonData)
        end
    end
end

function NetworkManager:parseParams(data,values)
    if values then
        local fields = string.split(data.fields,",")
        for i=1, #fields do
            data[fields[i]] = values[i]
        end
    end
    data = self:removeElementByKey(data,"fields")
    data.client = "Unity"
    return data
end


-- 删除table中的元素
function NetworkManager:removeElementByKey(tbl,key)
    --新建一个临时的table
    local tmp ={}

    --把每个key做一个下标，保存到临时的table中，转换成{1=a,2=c,3=b}
    --组成一个有顺序的table，才能在while循环准备时使用#table
    for i in pairs(tbl) do
        table.insert(tmp,i)
    end

    local newTbl = {}
    --使用while循环剔除不需要的元素
    local i = 1
    while i <= #tmp do
        local val = tmp [i]
        if val == key then
            --如果是需要剔除则remove
            table.remove(tmp,i)
        else
            --如果不是剔除，放入新的tabl中
            newTbl[val] = tbl[val]
            i = i + 1
        end
    end
    return newTbl
end

return NetworkManager